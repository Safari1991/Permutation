class QuickSort {
	
	//////////////////////////////////////////////////////////////////////////Functions
	ensures \result >= 0;
	ensures (\forall int j; j >= 0 && j < |ys|; element != ys[j]) ==> \result == 0;
	ensures \result == 0 ==> (\forall int j; j >= 0 && j < |ys|; element != ys[j]);
	ensures (\forall int j; j >= 0 && j < |ys|; element == ys[j]) ==> \result == |ys|;
	ensures \result == |ys| ==> (\forall int j; j >= 0 && j < |ys|; element == ys[j]);
	ensures \result <= |ys|;
	ensures element in ys ==> \result > 0;
	ensures \result > 0 ==> element in ys;
	static pure int counter(seq<int> ys, int element) =
		|ys| > 0 ? (head(ys) == element ? (1 + counter(tail(ys), element)) : counter(tail(ys), element)) : 0;
		
	
	requires i >= 0 && i < |xs|;
	requires j >= 0 && j < |xs|;
	requires i <= j;
	requires k >= 0 && k <= |xs|;
	ensures |\result| == |xs| - k;
	ensures k > j ==> (\forall int l; l >= 0 && l < |\result|; \result[l] == xs[l+k]);
	ensures k >= j ==> (\forall int l; l >= 0 && l < |\result|; ((l+k) != j ==> \result[l] == xs[l+k]) && ((l+k) == j ==> \result[l] == xs[i]));
	ensures k > i ==> (\forall int l; l >= 0 && l < |\result|; ((l+k) != j ==> \result[l] == xs[l+k]) && ((l+k) == j ==> \result[l] == xs[i]));
	ensures k >= i ==> (\forall int l; l >= 0 && l < |\result|; (((l+k) != i && (l+k) != j) ==> \result[l] == xs[l+k]) && ((l+k) == i ==> \result[l] == xs[j]) && ((l+k) 					== j ==> \result[l] == xs[i]));
	ensures (\forall int l; l >= 0 && l < |\result|; (((l+k) != i && (l+k) != j) ==> \result[l] == xs[l+k]) && ((l+k) == i ==> \result[l] == xs[j]) && ((l+k) == j ==> 						\result[l] == xs[i]));
	static pure seq<int> swap(seq<int> xs, int i, int j, int k) =
	 k < |xs| ? (k == i ? seq<int> {xs[j]} + swap(xs, i, j, k+1) : (k == j ? seq<int> {xs[i]} + swap(xs, i, j, k+1) : seq<int> {xs[k]} + swap(xs, i, j, k+1))) :
	 seq<int> {};
		 
		 
	static pure boolean isApermutation(seq<int> xs, seq<int> ys) = 
		|xs| == |ys| && (\forall int l; l>=0 && l<|xs|; counter(xs, xs[l]) == counter(ys, xs[l]));
	
	//////////////////////////////////////////////////////////////////////////Lemmas

	requires i >= 0 && i < |xs|;
	requires j >= 0 && j < |xs|;
	requires i <= j;
	ensures swap(xs, i, j, 0) == xs[i -> xs[j]][j -> xs[i]];
	ensures xs[i -> xs[j]][j -> xs[i]] == swap(xs, i, j, 0);
	void lemma_swap_seq_eq(seq<int> xs, int i, int j){
	
	}
	
	requires i >= 0 && i < |xs|;
	requires j >= 0 && j < |xs|;
	requires i == j;
	ensures swap(xs, i, j, 0) == xs;
	void lemma_swap_base(seq<int> xs, int i, int j){
	
	}
	
	ensures counter(seq<int> {}, i) == 0;  
	void lemma_count_empty(int i){
		
	}
	
	ensures i == element ==> counter(seq<int> {i}, element) == 1; 
	ensures i != element ==> counter(seq<int> {i}, element) == 0; 
	void lemma_count_single(int i, int element){
		
	}
	

	ensures |xs| == 0 ==> counter(xs + ys, element) == counter(ys, element);
	ensures |ys| == 0 ==> counter(xs + ys, element) == counter(xs, element);
	ensures |xs + ys| == |xs| + |ys|;
	ensures counter(tail(xs) + ys, element) == counter(tail(xs), element) + counter(ys, element);
	ensures counter(xs + ys, element) == counter(xs, element) + counter(ys, element);
	void lemma_count_app(seq<int> xs, seq<int> ys, int element) {
		if (0 < |xs|) {
			lemma_count_app(tail(xs), ys, element);
			assert tail(xs) + ys == tail(xs + ys);
		}
	}
	
	ensures (\forall int l; l>=0 && l<|xs|; counter(xs + ys, xs[l]) == counter(xs, xs[l]) + counter(ys, xs[l]));
	void lemma_count_app_all(seq<int> xs, seq<int> ys){
		int k = 0;

		loop_invariant 0 <= k && k <= |xs|;
		loop_invariant (\forall int l; l>=0 && l<k; counter(xs + ys, xs[l]) == counter(xs, xs[l]) + counter(ys, xs[l]));
		while(k < |xs|)
		{
			lemma_count_app(xs, ys, xs[k]);
			k=k+1;
		}

	}
	
	ensures counter(xs + ys + ts + rs + zs, element) == counter(xs, element) + counter(ys, element) + counter(ts, element) + counter(rs, element) + counter(zs, element);
	void lemma_count_app_ext(seq<int> xs, seq<int> ys, seq<int> ts, seq<int> rs, seq<int> zs, int element){
		lemma_count_app(xs + ys + ts + rs, zs, element);
		assert counter(xs + ys + ts + rs + zs, element) == counter(xs + ys + ts + rs, element) + counter(zs, element);
		lemma_count_app(xs + ys + ts, rs, element);
		assert counter(xs + ys + ts + rs, element) == counter(xs + ys + ts, element) + counter(rs, element);
		lemma_count_app(xs + ys, ts, element);
		assert counter(xs + ys + ts, element) == counter(xs + ys, element) + counter(ts, element);
		lemma_count_app(xs, ys, element);
		assert counter(xs + ys, element) == counter(xs, element) + counter(ys, element);
		
		assert counter(xs + ys + ts + rs + zs, element) == counter(xs, element) + counter(ys, element) + counter(ts, element) + counter(rs, element) + counter(zs, 					 element);
	}
	
	requires i >= 0 && i < |xs|;
	requires j >= 0 && j < |xs|;
	requires i < j;
	ensures xs == xs[0..i] + seq<int> {xs[i]} + xs[i+1..j] + seq<int> {xs[j]} + xs[j+1..|xs|];
	ensures counter(xs, element) == counter(xs[0..i] + seq<int> {xs[i]} + xs[i+1..j] + seq<int> {xs[j]} + xs[j+1..|xs|], element);
	void lemma_swap_permutation_helper(seq<int> xs, int i, int j, int element){
	
	}
	
	requires i >= 0 && i < |xs|;
	requires j >= 0 && j < |xs|;
	requires i <= j;
	requires ys == swap(xs, i, j, 0);
	ensures counter(xs, element) == counter(ys, element);
	void lemma_swap_permutation(seq<int> xs, seq<int> ys, int i, int j, int element){
		assert (\forall int l; l >= 0 && l < |ys|; (l != i && l != j) ==> swap(xs, i, j, 0)[l] == xs[l]);
		assert (\forall int l; l >= 0 && l < |ys|; ((l == i) ==> swap(xs, i, j, 0)[l] == xs[j]) && ((l == j) ==> ys[l] == xs[i]));
		if(i == j){
		lemma_swap_base(xs, i, j);
		assert xs == ys;
		assert counter(xs, element) == counter(ys, element);
		}
		if(i < j){
		assert ys == xs[0..i] + seq<int> {xs[j]} + xs[i+1..j] + seq<int> {xs[i]} + xs[j+1..|xs|];
		assert counter(ys, element) == counter(xs[0..i] + seq<int> {xs[j]} + xs[i+1..j] + seq<int> {xs[i]} + xs[j+1..|xs|], element);
		lemma_count_app_ext(xs[0..i], seq<int> {xs[j]}, xs[i+1..j], seq<int> {xs[i]}, xs[j+1..|xs|], element);
		assert counter(ys, element) == counter(xs[0..i], element) + counter(seq<int> {xs[j]}, element) + counter(xs[i+1..j], element) + counter(seq<int> {xs[i]}, element) + counter(xs[j+1..|xs|], element);
		lemma_count_single(i, element);
		lemma_count_single(j, element);
		lemma_swap_permutation_helper(xs, i, j, element);
		//assert xs == xs[0..i] + seq<int> {xs[i]} + xs[i+1..j] + seq<int> {xs[j]} + xs[j+1..|xs|];
		//assert counter(xs, element) == counter(xs[0..i] + seq<int> {xs[i]} + xs[i+1..j] + seq<int> {xs[j]} + xs[j+1..|xs|], element);
		lemma_count_app_ext(xs[0..i], seq<int> {xs[i]}, xs[i+1..j], seq<int> {xs[j]}, xs[j+1..|xs|], element);
		assert counter(xs, element) == counter(xs[0..i], element) + counter(seq<int> {xs[i]}, element) + counter(xs[i+1..j], element) + counter(seq<int> {xs[j]}, element) 																	 + counter(xs[j+1..|xs|], element);
		
		assert counter(xs, element) == counter(ys, element);
		
		}
		
		assert counter(xs, element) == counter(ys, element);
	
	}
	
	
	requires i >= 0 && i < |xs|;
	requires j >= 0 && j < |xs|;
	requires i <= j;
	requires ys == swap(xs, i, j, 0);
	ensures (\forall int l; l>=0 && l<|xs|; counter(xs, xs[l]) == counter(ys, xs[l]));
	void lemma_swap_permutation_all(seq<int> xs, seq<int> ys, int i, int j){
		int k = 0;

		loop_invariant 0 <= k && k <= |xs|;
		loop_invariant (\forall int l; l>=0 && l<k; counter(xs, xs[l]) == counter(ys, xs[l]));
		while(k < |xs|)
		{
			lemma_swap_permutation(xs, ys, i, j, xs[k]);
			k=k+1;
		}

	}
	
	
	requires |xs| == |ys|;
	requires |ys| == |ts|;
	requires (\forall int l; l>=0 && l<|xs|; counter(xs, xs[l]) == counter(ys, xs[l]));
	requires (\forall int l; l>=0 && l<|xs|; counter(ys, ys[l]) == counter(ts, ys[l]));
	ensures (\forall int l; l>=0 && l<|xs|; counter(xs, xs[l]) == counter(ts, xs[l]));
	void lemma_swap_permutation_trans(seq<int> xs, seq<int> ys, seq<int> ts){

		
	}	
	
	requires i >= 0 && i < |xs|;
	requires j >= 0 && j < |xs|;
	requires i <= j;
	requires |xs| == |ys|;
	requires |ys| == |ts|;
	requires (\forall int l; l>=0 && l<|xs|; counter(xs, xs[l]) == counter(ys, xs[l]));
	requires ts == swap(ys, i, j, 0);
	ensures (\forall int l; l>=0 && l<|xs|; counter(xs, xs[l]) == counter(ts, xs[l]));
	ensures swap(ys, i, j, 0) == ys[i -> ys[j]][j -> ys[i]];
	ensures ys[i -> ys[j]][j -> ys[i]] == swap(ys, i, j, 0);
	void lemma_permutation_apply(seq<int> xs, seq<int> ys, seq<int> ts, int i, int j){
			
			lemma_swap_permutation_all(ys, ts, i, j);
			lemma_swap_permutation_trans(xs, ys, ts);

	}
	
	//////////////////////////////////////////////////////////////////////////////////////////Main
	//yields int p;
	/*context_everywhere input != null;
	context_everywhere input.length == size;
	context_everywhere size > 0;
	requires low >= 0 && low <= size-1;
	requires high >= 0 && high <= size-1;
	requires low < high;
	context (\forall* int k; k >= 0 && k < size; Perm(input[k], write));
	//ensures p >= 0; 
	//ensures p <= size-1;
	int partition(int[] input, int size, int low, int high) 
	{ 
	    int x = input[high]; 
	    int i = (low - 1); 
			int j = low;
			int temp;
  		
			assert i >= (low - 1);
			
			loop_invariant low >= 0 && low <= size-1;
			loop_invariant high >= 0 && high <= size-1;
			loop_invariant j >= low;
			loop_invariant j <= high;
			loop_invariant i >= (low - 1);
			loop_invariant i < j;
			loop_invariant i < high;
			loop_invariant (\forall* int k; k >= 0 && k < size; Perm(input[k], write));
	    //for (int j = low; j <= high - 1; j++) { 
			while(j < high){
				assert i >= (low - 1);
	        if (input[j] <= x) { 
	            i++; 
	            //swap(input[i], input[j]);
		 				 temp = input[i];
		 				 input[i] = input[j];
		 				 //inp_seq_cur = inp_seq_cur[outerLoop -> input[minIndex]];	
		 				 input[j] = temp;
		 				 //inp_seq_cur = inp_seq_cur[minIndex -> temp]; 
	        }
					j++; 
					assert i >= (low - 1);
	    } 
	    //swap(input[i + 1], input[high]); 
		  temp = input[i+1];
		  input[i+1] = input[high];
		  //inp_seq_cur = inp_seq_cur[outerLoop -> input[minIndex]];	
		  input[high] = temp;
		  //inp_seq_cur = inp_seq_cur[minIndex -> temp];
		 
	    return (i + 1); 
	}*/
	
	//int counter;
	//assume counter == 1;
	
	context_everywhere input != null;
	context_everywhere input.length == size;
	context_everywhere size > 0;
	requires length > 0;
	requires low >= 0 && low <= size;
	requires high >= -1 && high <= size-1;
	context |inp_seq_cur| == size;
	requires |inp_seq_all| == length;
	requires (\forall int k; 0 <= k && k < length; |inp_seq_all[k]| == size);
	context (\forall* int k; k >= 0 && k < size; Perm(input[k], write));
	context (\forall int k; 0 <= k && k < size; input[k] == inp_seq_cur[k]);
	requires (\forall int k; 0 <= k && k < size; inp_seq_all[length-1][k] == inp_seq_cur[k]);
	requires isApermutation(inp_seq_all[0], inp_seq_cur);
	ensures isApermutation(inp_seq_all[0], inp_seq_cur);
	void quickSort(int[] input, int size, int low, int high, seq<int> inp_seq_cur, seq<seq<int>> inp_seq_all, int length) 
	{ 	
		
	    if (low < high) { 
	        
	        //int pivotIdx = partition(input, size, low, high); 
					int pivotIdx;
			    int x = input[high]; 
			    int i = (low - 1); 
					int j = low;
					int temp;
					
					assert inp_seq_all[length-1] == inp_seq_cur;
					assert isApermutation(inp_seq_all[0], inp_seq_cur);
					/////////////////////////////////////////////////////////////////Partitioning
					loop_invariant |inp_seq_cur| == size;
					loop_invariant low >= 0 && low <= size-1;
					loop_invariant high >= 0 && high <= size-1;
					loop_invariant j >= low;
					loop_invariant j <= high;
					loop_invariant i >= (low - 1);
					loop_invariant i < j;
					loop_invariant i < high;
					loop_invariant (\forall* int k; k >= 0 && k < size; Perm(input[k], write));
					loop_invariant (\forall int k; 0 <= k && k < size; input[k] == inp_seq_cur[k]); 
					loop_invariant isApermutation(inp_seq_all[0], inp_seq_cur);    
					while(j < high){
						assert isApermutation(inp_seq_all[0], inp_seq_cur);
			        if (input[j] <= x) { 
			            i++; 
									lemma_permutation_apply(inp_seq_all[0], inp_seq_cur, swap(inp_seq_cur, i, j, 0), i, j);
			            //swap(input[i], input[j]);
				 				 temp = input[i];
				 				 input[i] = input[j];
				 				 inp_seq_cur = inp_seq_cur[i -> input[j]];	
				 				 input[j] = temp;
				 				 inp_seq_cur = inp_seq_cur[j -> temp]; 
			        }
							j++; 
							assert isApermutation(inp_seq_all[0], inp_seq_cur);
							
			    }
					lemma_permutation_apply(inp_seq_all[0], inp_seq_cur, swap(inp_seq_cur, i+1, high, 0), i+1, high); 
			    //swap(input[i + 1], input[high]); 
				  temp = input[i+1];
				  input[i+1] = input[high];
				  inp_seq_cur = inp_seq_cur[i+1 -> input[high]];	
				  input[high] = temp;
				  inp_seq_cur = inp_seq_cur[high -> temp];
					
					inp_seq_all = inp_seq_all + seq<seq<int>> {inp_seq_cur};
					
					pivotIdx = i + 1;
					length++;
					//////////////////////////////////////////////////////////////////////////////////////////////////Recursive calls
	        quickSort(input, size, low, pivotIdx - 1, inp_seq_cur, inp_seq_all, length); 
	        quickSort(input, size, pivotIdx + 1, high, inp_seq_cur, inp_seq_all, length); 
	    } 
	}
	
	
	context_everywhere input != null;
	context_everywhere input.length == size;
	context_everywhere size > 0;
	requires length == 1;
	requires low >= 0 && low <= size;
	requires high >= -1 && high <= size-1;
	context |inp_seq_cur| == size;
	requires |inp_seq_all| == length;
	requires (\forall int k; 0 <= k && k < length; |inp_seq_all[k]| == size);
	context (\forall* int k; k >= 0 && k < size; Perm(input[k], write));
	context (\forall int k; 0 <= k && k < size; input[k] == inp_seq_cur[k]);
	requires (\forall int k; 0 <= k && k < size; inp_seq_all[0][k] == inp_seq_cur[k]);
	ensures (\forall int k; 0 <= k && k < size; inp_seq_all[|inp_seq_all|-1][k] == inp_seq_cur[k]);
	ensures isApermutation(inp_seq_all[0], inp_seq_cur);
	int main(int[] input, int size, int low, int high, seq<int> inp_seq_cur, seq<seq<int>> inp_seq_all, int length){
		  assert inp_seq_all[0] == inp_seq_cur;
			assert isApermutation(inp_seq_all[0], inp_seq_cur);
			low = 0;
			high = size - 1;
			quickSort(input, size, low, high, inp_seq_cur, inp_seq_all, length); 
	}



}