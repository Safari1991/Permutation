class TimSort {
	
	
	//////////////////////////////////////////////////////////////////////////Functions
	ensures \result >= 0;
	ensures (\forall int j; j >= 0 && j < |ys|; element != ys[j]) ==> \result == 0;
	ensures \result == 0 ==> (\forall int j; j >= 0 && j < |ys|; element != ys[j]);
	ensures (\forall int j; j >= 0 && j < |ys|; element == ys[j]) ==> \result == |ys|;
	ensures \result == |ys| ==> (\forall int j; j >= 0 && j < |ys|; element == ys[j]);
	ensures \result <= |ys|;
	ensures element in ys ==> \result > 0;
	ensures \result > 0 ==> element in ys;
	static pure int counter(seq<int> ys, int element) =
		|ys| > 0 ? (head(ys) == element ? (1 + counter(tail(ys), element)) : counter(tail(ys), element)) : 0;
		
	
	requires i >= 0 && i < |xs|;
	requires j >= 0 && j < |xs|;
	requires i <= j;
	requires k >= 0 && k <= |xs|;
	ensures |\result| == |xs| - k;
	ensures k > j ==> (\forall int l; l >= 0 && l < |\result|; \result[l] == xs[l+k]);
	ensures k >= j ==> (\forall int l; l >= 0 && l < |\result|; ((l+k) != j ==> \result[l] == xs[l+k]) && ((l+k) == j ==> \result[l] == xs[i]));
	ensures k > i ==> (\forall int l; l >= 0 && l < |\result|; ((l+k) != j ==> \result[l] == xs[l+k]) && ((l+k) == j ==> \result[l] == xs[i]));
	ensures k >= i ==> (\forall int l; l >= 0 && l < |\result|; (((l+k) != i && (l+k) != j) ==> \result[l] == xs[l+k]) && ((l+k) == i ==> \result[l] == xs[j]) && ((l+k) 					== j ==> \result[l] == xs[i]));
	ensures (\forall int l; l >= 0 && l < |\result|; (((l+k) != i && (l+k) != j) ==> \result[l] == xs[l+k]) && ((l+k) == i ==> \result[l] == xs[j]) && ((l+k) == j ==> 						\result[l] == xs[i]));
	static pure seq<int> swap(seq<int> xs, int i, int j, int k) =
	 k < |xs| ? (k == i ? seq<int> {xs[j]} + swap(xs, i, j, k+1) : (k == j ? seq<int> {xs[i]} + swap(xs, i, j, k+1) : seq<int> {xs[k]} + swap(xs, i, j, k+1))) :
	 seq<int> {};
		 
		 
	static pure boolean isApermutation(seq<int> xs, seq<int> ys) = 
		|xs| == |ys| && (\forall int l; l>=0 && l<|xs|; counter(xs, xs[l]) == counter(ys, xs[l]));
	
	//////////////////////////////////////////////////////////////////////////Lemmas

	requires i >= 0 && i < |xs|;
	requires j >= 0 && j < |xs|;
	requires i <= j;
	ensures swap(xs, i, j, 0) == xs[i -> xs[j]][j -> xs[i]];
	ensures xs[i -> xs[j]][j -> xs[i]] == swap(xs, i, j, 0);
	void lemma_swap_seq_eq(seq<int> xs, int i, int j){
	
	}
	
	requires i >= 0 && i < |xs|;
	requires j >= 0 && j < |xs|;
	requires i == j;
	ensures swap(xs, i, j, 0) == xs;
	void lemma_swap_base(seq<int> xs, int i, int j){
	
	}
	
	ensures counter(seq<int> {}, i) == 0;  
	void lemma_count_empty(int i){
		
	}
	
	ensures i == element ==> counter(seq<int> {i}, element) == 1; 
	ensures i != element ==> counter(seq<int> {i}, element) == 0; 
	void lemma_count_single(int i, int element){
		
	}
	

	ensures |xs| == 0 ==> counter(xs + ys, element) == counter(ys, element);
	ensures |ys| == 0 ==> counter(xs + ys, element) == counter(xs, element);
	ensures |xs + ys| == |xs| + |ys|;
	ensures counter(tail(xs) + ys, element) == counter(tail(xs), element) + counter(ys, element);
	ensures counter(xs + ys, element) == counter(xs, element) + counter(ys, element);
	void lemma_count_app(seq<int> xs, seq<int> ys, int element) {
		if (0 < |xs|) {
			lemma_count_app(tail(xs), ys, element);
			assert tail(xs) + ys == tail(xs + ys);
		}
	}
	
	ensures (\forall int l; l>=0 && l<|xs|; counter(xs + ys, xs[l]) == counter(xs, xs[l]) + counter(ys, xs[l]));
	void lemma_count_app_all(seq<int> xs, seq<int> ys){
		int k = 0;

		loop_invariant 0 <= k && k <= |xs|;
		loop_invariant (\forall int l; l>=0 && l<k; counter(xs + ys, xs[l]) == counter(xs, xs[l]) + counter(ys, xs[l]));
		while(k < |xs|)
		{
			lemma_count_app(xs, ys, xs[k]);
			k=k+1;
		}

	}
	
	ensures counter(xs + ys + ts + rs + zs, element) == counter(xs, element) + counter(ys, element) + counter(ts, element) + counter(rs, element) + counter(zs, element);
	void lemma_count_app_ext(seq<int> xs, seq<int> ys, seq<int> ts, seq<int> rs, seq<int> zs, int element){
		lemma_count_app(xs + ys + ts + rs, zs, element);
		assert counter(xs + ys + ts + rs + zs, element) == counter(xs + ys + ts + rs, element) + counter(zs, element);
		lemma_count_app(xs + ys + ts, rs, element);
		assert counter(xs + ys + ts + rs, element) == counter(xs + ys + ts, element) + counter(rs, element);
		lemma_count_app(xs + ys, ts, element);
		assert counter(xs + ys + ts, element) == counter(xs + ys, element) + counter(ts, element);
		lemma_count_app(xs, ys, element);
		assert counter(xs + ys, element) == counter(xs, element) + counter(ys, element);
		
		assert counter(xs + ys + ts + rs + zs, element) == counter(xs, element) + counter(ys, element) + counter(ts, element) + counter(rs, element) + counter(zs, 					 element);
	}
	
	requires i >= 0 && i < |xs|;
	requires j >= 0 && j < |xs|;
	requires i < j;
	ensures xs == xs[0..i] + seq<int> {xs[i]} + xs[i+1..j] + seq<int> {xs[j]} + xs[j+1..|xs|];
	ensures counter(xs, element) == counter(xs[0..i] + seq<int> {xs[i]} + xs[i+1..j] + seq<int> {xs[j]} + xs[j+1..|xs|], element);
	void lemma_swap_permutation_helper(seq<int> xs, int i, int j, int element){
	
	}
	
	requires i >= 0 && i < |xs|;
	requires j >= 0 && j < |xs|;
	requires i <= j;
	requires ys == swap(xs, i, j, 0);
	ensures counter(xs, element) == counter(ys, element);
	void lemma_swap_permutation(seq<int> xs, seq<int> ys, int i, int j, int element){
		assert (\forall int l; l >= 0 && l < |ys|; (l != i && l != j) ==> swap(xs, i, j, 0)[l] == xs[l]);
		assert (\forall int l; l >= 0 && l < |ys|; ((l == i) ==> swap(xs, i, j, 0)[l] == xs[j]) && ((l == j) ==> ys[l] == xs[i]));
		if(i == j){
		lemma_swap_base(xs, i, j);
		assert xs == ys;
		assert counter(xs, element) == counter(ys, element);
		}
		if(i < j){
		assert ys == xs[0..i] + seq<int> {xs[j]} + xs[i+1..j] + seq<int> {xs[i]} + xs[j+1..|xs|];
		assert counter(ys, element) == counter(xs[0..i] + seq<int> {xs[j]} + xs[i+1..j] + seq<int> {xs[i]} + xs[j+1..|xs|], element);
		lemma_count_app_ext(xs[0..i], seq<int> {xs[j]}, xs[i+1..j], seq<int> {xs[i]}, xs[j+1..|xs|], element);
		assert counter(ys, element) == counter(xs[0..i], element) + counter(seq<int> {xs[j]}, element) + counter(xs[i+1..j], element) + counter(seq<int> {xs[i]}, element) + counter(xs[j+1..|xs|], element);
		lemma_count_single(i, element);
		lemma_count_single(j, element);
		lemma_swap_permutation_helper(xs, i, j, element);
		//assert xs == xs[0..i] + seq<int> {xs[i]} + xs[i+1..j] + seq<int> {xs[j]} + xs[j+1..|xs|];
		//assert counter(xs, element) == counter(xs[0..i] + seq<int> {xs[i]} + xs[i+1..j] + seq<int> {xs[j]} + xs[j+1..|xs|], element);
		lemma_count_app_ext(xs[0..i], seq<int> {xs[i]}, xs[i+1..j], seq<int> {xs[j]}, xs[j+1..|xs|], element);
		assert counter(xs, element) == counter(xs[0..i], element) + counter(seq<int> {xs[i]}, element) + counter(xs[i+1..j], element) + counter(seq<int> {xs[j]}, element) 																	 + counter(xs[j+1..|xs|], element);
		
		assert counter(xs, element) == counter(ys, element);
		
		}
		
		assert counter(xs, element) == counter(ys, element);
	
	}
	
	
	requires i >= 0 && i < |xs|;
	requires j >= 0 && j < |xs|;
	requires i <= j;
	requires ys == swap(xs, i, j, 0);
	ensures (\forall int l; l>=0 && l<|xs|; counter(xs, xs[l]) == counter(ys, xs[l]));
	void lemma_swap_permutation_all(seq<int> xs, seq<int> ys, int i, int j){
		int k = 0;

		loop_invariant 0 <= k && k <= |xs|;
		loop_invariant (\forall int l; l>=0 && l<k; counter(xs, xs[l]) == counter(ys, xs[l]));
		while(k < |xs|)
		{
			lemma_swap_permutation(xs, ys, i, j, xs[k]);
			k=k+1;
		}

	}
	
	
	requires |xs| == |ys|;
	requires |ys| == |ts|;
	requires (\forall int l; l>=0 && l<|xs|; counter(xs, xs[l]) == counter(ys, xs[l]));
	requires (\forall int l; l>=0 && l<|xs|; counter(ys, ys[l]) == counter(ts, ys[l]));
	ensures (\forall int l; l>=0 && l<|xs|; counter(xs, xs[l]) == counter(ts, xs[l]));
	void lemma_swap_permutation_trans(seq<int> xs, seq<int> ys, seq<int> ts){

		
	}	
	
	requires i >= 0 && i < |xs|;
	requires j >= 0 && j < |xs|;
	requires i <= j;
	requires |xs| == |ys|;
	requires |ys| == |ts|;
	requires (\forall int l; l>=0 && l<|xs|; counter(xs, xs[l]) == counter(ys, xs[l]));
	requires ts == swap(ys, i, j, 0);
	ensures (\forall int l; l>=0 && l<|xs|; counter(xs, xs[l]) == counter(ts, xs[l]));
	ensures swap(ys, i, j, 0) == ys[i -> ys[j]][j -> ys[i]];
	ensures ys[i -> ys[j]][j -> ys[i]] == swap(ys, i, j, 0);
	void lemma_permutation_apply(seq<int> xs, seq<int> ys, seq<int> ts, int i, int j){
			
			lemma_swap_permutation_all(ys, ts, i, j);
			lemma_swap_permutation_trans(xs, ys, ts);

	}
	
	//////////////////////////////////////////////////////////////////////////////////////////Insertion
	context_everywhere input != null;
	context_everywhere input.length == size;
	context_everywhere size > 0;
	requires length > 0;
	context |inp_seq_cur| == size;
	requires |inp_seq_all| == length;
	context (\forall int k; 0 <= k && k < length; |inp_seq_all[k]| == size);
	requires start >= 0 && start < size;
	requires end >= 0 && end < size;
	requires start <= end;
	context (\forall* int i; i >= 0 && i < size; Perm(input[i], write));
	context (\forall int i; 0 <= i && i < size; input[i] == inp_seq_cur[i]);
	requires (\forall int i; 0 <= i && i < size; inp_seq_all[length-1][i] == inp_seq_cur[i]);
	requires isApermutation(inp_seq_all[0], inp_seq_cur);
	ensures isApermutation(inp_seq_all[0], inp_seq_cur);
	void insertion(int[] input, int size, int start, int end, seq<int> inp_seq_cur, seq<seq<int>> inp_seq_all, int length){
	
		  int outerLoop = start+1;
		  int innerLoop = 0;
		  int temp; 
			
			//assert inp_seq_all[0] == inp_seq_cur;
		
			loop_invariant start >= 0 && start < size;
			loop_invariant end >= 0 && end < size;
			loop_invariant start <= end;
		  loop_invariant outerLoop >= start+1 && outerLoop <= end+1;
		  loop_invariant (\forall* int i; i >= 0 && i < size; Perm(input[i], write));  
		  //loop_invariant |inp_seq_all| == outerLoop;
		  //loop_invariant (\forall int i; 0 <= i && i < outerLoop; |inp_seq_all[i]| == size);
			loop_invariant (\forall int k; 0 <= k && k < length; |inp_seq_all[k]| == size);
			loop_invariant |inp_seq_cur| == size;
			//loop_invariant (\forall int i; 0 <= i && i < size; inp_seq_all[outerLoop-1][i] == inp_seq_cur[i]); 
			loop_invariant (\forall int i; 0 <= i && i < size; input[i] == inp_seq_cur[i]);
			loop_invariant isApermutation(inp_seq_all[0], inp_seq_cur);
		  while(outerLoop < end+1){  
				innerLoop = outerLoop;
				
				  loop_invariant start >= 0 && start < size;
				  loop_invariant end >= 0 && end < size;
				  loop_invariant start <= end;
				  loop_invariant outerLoop >= start+1 && outerLoop < end+1;
				  loop_invariant innerLoop >= start && innerLoop <= outerLoop;
				  loop_invariant (\forall* int i; i >= 0 && i < size; Perm(input[i], write));
			    //loop_invariant |inp_seq_all| == outerLoop ;
			    //loop_invariant (\forall int i; 0 <= i && i < outerLoop; |inp_seq_all[i]| == size);
					loop_invariant (\forall int k; 0 <= k && k < length; |inp_seq_all[k]| == size);
				  loop_invariant |inp_seq_cur| == size;
					loop_invariant (\forall int i; 0 <= i && i < size; input[i] == inp_seq_cur[i]); 
					loop_invariant isApermutation(inp_seq_all[0], inp_seq_cur);
					while(innerLoop > start && input[innerLoop-1] > input[innerLoop]){  
						 lemma_permutation_apply(inp_seq_all[0], inp_seq_cur, swap(inp_seq_cur, innerLoop-1, innerLoop, 0), innerLoop-1, innerLoop);
						 
						 temp = input[innerLoop-1];
						 input[innerLoop-1] = input[innerLoop];
						 inp_seq_cur = inp_seq_cur[innerLoop-1 -> input[innerLoop]];	
						 input[innerLoop] = temp;
						 inp_seq_cur = inp_seq_cur[innerLoop -> temp];	
						 
						 innerLoop = innerLoop - 1;	
				 }
				 outerLoop = outerLoop + 1;
				 
				 //inp_seq_all = inp_seq_all + seq<seq<int>> {inp_seq_cur};
		}
		
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////Merge1
	// Merges two subarrays of arr[]. 
	// First subarray is arr[l..m] 
	// Second subarray is arr[m+1..r] 
	// Inplace Implementation
	context_everywhere input != null;
	context_everywhere input.length == size;
	context_everywhere size > 0;
	requires length > 0;
	requires start >= 0 && start < size;
	requires mid >= 0 ;
	requires mid < size-1;
	requires end >= 0 && end < size;
	requires start <= end;
	requires mid >= start; 
	requires mid < end;
	context |inp_seq_cur| == size;
	requires |inp_seq_all| == length;
	requires (\forall int k; 0 <= k && k < length; |inp_seq_all[k]| == size);
	context (\forall* int k; k >= 0 && k < size; Perm(input[k], write)); 
	requires (\forall int k; 0 <= k && k < size; inp_seq_all[length-1][k] == inp_seq_cur[k]);
	ensures |inp_seq_all| == length; 
	ensures (\forall int k; 0 <= k && k < length; |inp_seq_all[k]| == size);
	context (\forall int k; 0 <= k && k < size; input[k] == inp_seq_cur[k]);
	//ensures (\forall int k; 0 <= k && k < size; inp_seq_all[length-1][k] == inp_seq_cur[k]);
	requires isApermutation(inp_seq_all[0], inp_seq_cur);
	ensures isApermutation(inp_seq_all[0], inp_seq_cur);
	void Tomerge(int[] input, int size, int start, int mid, int end, seq<int> inp_seq_cur, seq<seq<int>> inp_seq_all, int length) 
	{ 
	    int start2 = mid + 1; 
  
	    // If the direct merge is already sorted 
	    if (input[mid] <= input[start2]) { 
	        return; 
	    } 
  
			assert inp_seq_all[length-1] == inp_seq_cur;
			assert isApermutation(inp_seq_all[0], inp_seq_cur);
			
	    // Two pointers to maintain start 
	    // of both arrays to merge 
			loop_invariant length > 0;
			loop_invariant |inp_seq_all| == length;
			loop_invariant (\forall int k; 0 <= k && k < length; |inp_seq_all[k]| == size);
			loop_invariant |inp_seq_cur| == size;
			loop_invariant start >= 0 && start < size;
			loop_invariant end >= 0 && end < size;
			loop_invariant start <= end;
			loop_invariant mid+1 >= start;
			loop_invariant mid <= end;
			loop_invariant start2 > mid && start2 <= end+1;
			loop_invariant (\forall* int k; k >= 0 && k < size; Perm(input[k], write));
			loop_invariant (\forall int k; 0 <= k && k < size; input[k] == inp_seq_cur[k]); 
			loop_invariant isApermutation(inp_seq_all[0], inp_seq_cur);
	    while (start <= mid && start2 <= end) { 
  
	        // If element 1 is in right place 
	        if (input[start] <= input[start2]) { 
	            start++; 
	        } 
	        else { 
	            //int value = input[start2]; 
	            int index = start2; 
  						int temp;
	            // Shift all the elements between element 1 
	            // element 2, right by 1. 
							loop_invariant length > 0;
							loop_invariant |inp_seq_all| == length;
							loop_invariant (\forall int k; 0 <= k && k < length; |inp_seq_all[k]| == size);
							loop_invariant |inp_seq_cur| == size;
							loop_invariant start >= 0 && start < size;
							loop_invariant end >= 0 && end < size;
							loop_invariant start <= end;
							loop_invariant mid >= start && mid <= end;
							loop_invariant start2 > mid && start2 <= end;
							loop_invariant index <= start2 && index >= start;
							loop_invariant (\forall* int k; k >= 0 && k < size; Perm(input[k], write)); 
							loop_invariant (\forall int k; 0 <= k && k < size; input[k] == inp_seq_cur[k]); 
							loop_invariant isApermutation(inp_seq_all[0], inp_seq_cur);
	            while (index != start) { 
	                //input[index] = input[index - 1];
								 lemma_permutation_apply(inp_seq_all[0], inp_seq_cur, swap(inp_seq_cur, index-1, index, 0), index-1, index);
				 				 temp = input[index-1];
				 				 input[index-1] = input[index];
				 				 inp_seq_cur = inp_seq_cur[index-1 -> input[index]];	
				 				 input[index] = temp;
				 				 inp_seq_cur = inp_seq_cur[index -> temp]; 
	               index--; 
	            } 
	            //input[start] = value; 
  
	            // Update all the pointers 
	            start++; 
	            mid++; 
	            start2++; 
	        } 
			} 
			

	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////TimSort
	// iterative Timsort function to sort the 
	// array[0...size-1] (similar to merge sort) 
	context_everywhere input != null;
	context_everywhere input.length == size;
	context_everywhere size > 0;
	context |inp_seq_cur| == size;
	requires length == 1;
	requires |inp_seq_all| == length;
	requires |inp_seq_all[0]| == size;
	context (\forall* int i; i >= 0 && i < size; Perm(input[i], write));
	context (\forall int i; 0 <= i && i < size; input[i] == inp_seq_cur[i]);
	requires (\forall int i; 0 <= i && i < size; inp_seq_all[0][i] == inp_seq_cur[i]);
	ensures (\forall int k; 0 <= k && k < size; inp_seq_all[|inp_seq_all|-1][k] == inp_seq_cur[k]);
	ensures isApermutation(inp_seq_all[0], inp_seq_cur);
	void timSort(int[] input, int size, seq<int> inp_seq_cur, seq<seq<int>> inp_seq_all, int length) 
	{ 
			assert inp_seq_all[length-1] == inp_seq_cur;
			assert isApermutation(inp_seq_all[0], inp_seq_cur);
			
			int RUN = 32;
			int loopCounter=0;
	    // Sort individual subarrays of size RUN 
			loop_invariant RUN == 32;
			loop_invariant length > 0;
			loop_invariant loopCounter >= 0 && loopCounter < size + RUN;
			loop_invariant (\forall* int i; i >= 0 && i < size; Perm(input[i], write));
			loop_invariant |inp_seq_all| == length;
			loop_invariant (\forall int k; 0 <= k && k < length; |inp_seq_all[k]| == size);
			loop_invariant (\forall int i; 0 <= i && i < size; input[i] == inp_seq_cur[i]);
			loop_invariant (\forall int i; 0 <= i && i < size; inp_seq_all[length-1][i] == inp_seq_cur[i]);
			loop_invariant isApermutation(inp_seq_all[0], inp_seq_cur);
	    //for (int i = 0; i < size; i+=RUN){ 
			while(loopCounter < size)
			{	
					int end;
					if((loopCounter+31) < (size-1)){
						end = loopCounter+31;
					} else{
						end = size-1;
					}
					
	        insertion(input, size, loopCounter, end, inp_seq_cur, inp_seq_all, length); 
					inp_seq_all = inp_seq_all + seq<seq<int>> {inp_seq_cur};
					length++;
					loopCounter= loopCounter + RUN;
  		}
			
			int chunk = RUN;
	    // start merging from chunk RUN (or 32). It will merge 
	    // to form chunk 64, then 128, 256 and so on .... 
	    //for (int chunk = RUN; chunk < size; chunk = 2*chunk)
			loop_invariant RUN == 32;
			loop_invariant length > 0;
			loop_invariant chunk >= RUN && chunk < size + chunk;
			loop_invariant (\forall* int i; i >= 0 && i < size; Perm(input[i], write)); 
			loop_invariant |inp_seq_all| == length;
			loop_invariant (\forall int k; 0 <= k && k < length; |inp_seq_all[k]| == size);
			loop_invariant (\forall int i; 0 <= i && i < size; input[i] == inp_seq_cur[i]);
			loop_invariant (\forall int i; 0 <= i && i < size; inp_seq_all[length-1][i] == inp_seq_cur[i]);
			loop_invariant isApermutation(inp_seq_all[0], inp_seq_cur);
			while(chunk < size) 
	    { 
					int left = 0; 
	        // pick starting point of left sub array. We 
	        // are going to merge arr[left..left+chunk-1] 
	        // and arr[left+chunk, left+2*chunk-1] 
	        // After every merge, we increase left by 2*chunk 
	        //for (int left = 0; left < size; left += 2*chunk) 
					loop_invariant left >= 0 && left < size + 2*chunk;
					loop_invariant length > 0;
					loop_invariant chunk < size;
					loop_invariant (\forall* int i; i >= 0 && i < size; Perm(input[i], write));
					loop_invariant |inp_seq_all| == length;
					loop_invariant (\forall int k; 0 <= k && k < length; |inp_seq_all[k]| == size);
					loop_invariant (\forall int i; 0 <= i && i < size; input[i] == inp_seq_cur[i]);
					loop_invariant (\forall int i; 0 <= i && i < size; inp_seq_all[length-1][i] == inp_seq_cur[i]);
					loop_invariant isApermutation(inp_seq_all[0], inp_seq_cur);
					while(left < size)
	        { 
	            // find ending point of left sub array 
	            // mid+1 is starting point of right sub array 
	            
							int mid = left + chunk - 1; 
							//mid = min((left + chunk - 1), (size - 1))
							/*int mid;
							if((left + chunk - 1) < (size-1)){
								mid = left + chunk - 1;
							} else{
								mid = left;
							}*/
							int right;
							//int right = min((left + 2*chunk - 1), (size-1)); 
							if((left + 2*chunk - 1) < (size-1)){
								right = left + 2*chunk - 1;
							} else{
								right = size-1;
							}
	            
  
	            // merge sub array arr[left.....mid] & 
	            // arr[mid+1....right] 
							if(mid < size - 1){
	            	Tomerge(input, size, left, mid, right, inp_seq_cur, inp_seq_all, length);
							} 
							inp_seq_all = inp_seq_all + seq<seq<int>> {inp_seq_cur};
							length++;
							left = left + 2*chunk;
	        } 
					
					chunk = 2*chunk;
	    } 
	}

}